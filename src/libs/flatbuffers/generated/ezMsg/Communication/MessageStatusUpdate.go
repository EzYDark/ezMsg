// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Communication

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageStatusUpdate struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageStatusUpdate(buf []byte, offset flatbuffers.UOffsetT) *MessageStatusUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageStatusUpdate{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MessageStatusUpdate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageStatusUpdate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageStatusUpdate) MessageUid() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageStatusUpdate) MutateMessageUid(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *MessageStatusUpdate) Status() MessageStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return MessageStatus(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MessageStatusUpdate) MutateStatus(n MessageStatus) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *MessageStatusUpdate) UpdatedByUid() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageStatusUpdate) MutateUpdatedByUid(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *MessageStatusUpdate) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageStatusUpdate) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func MessageStatusUpdateStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MessageStatusUpdateAddMessageUid(builder *flatbuffers.Builder, messageUid uint64) {
	builder.PrependUint64Slot(0, messageUid, 0)
}
func MessageStatusUpdateAddStatus(builder *flatbuffers.Builder, status MessageStatus) {
	builder.PrependByteSlot(1, byte(status), 0)
}
func MessageStatusUpdateAddUpdatedByUid(builder *flatbuffers.Builder, updatedByUid uint64) {
	builder.PrependUint64Slot(2, updatedByUid, 0)
}
func MessageStatusUpdateAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(3, timestamp, 0)
}
func MessageStatusUpdateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
