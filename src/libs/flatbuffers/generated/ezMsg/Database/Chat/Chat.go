// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Chat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Chat struct {
	_tab flatbuffers.Table
}

func GetRootAsChat(buf []byte, offset flatbuffers.UOffsetT) *Chat {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Chat{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Chat) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Chat) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Chat) UID() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Chat) MutateUID(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Chat) MembersUIDs(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Chat) MembersUIDsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Chat) MutateMembersUIDs(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *Chat) MessagesUIDs(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Chat) MessagesUIDsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Chat) MutateMessagesUIDs(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *Chat) AttachmentsUIDs(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Chat) AttachmentsUIDsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Chat) MutateAttachmentsUIDs(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func ChatStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ChatAddUID(builder *flatbuffers.Builder, UID uint64) {
	builder.PrependUint64Slot(0, UID, 0)
}
func ChatAddMembersUIDs(builder *flatbuffers.Builder, MembersUIDs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(MembersUIDs), 0)
}
func ChatStartMembersUIDsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ChatAddMessagesUIDs(builder *flatbuffers.Builder, MessagesUIDs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(MessagesUIDs), 0)
}
func ChatStartMessagesUIDsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ChatAddAttachmentsUIDs(builder *flatbuffers.Builder, AttachmentsUIDs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(AttachmentsUIDs), 0)
}
func ChatStartAttachmentsUIDsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ChatEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
