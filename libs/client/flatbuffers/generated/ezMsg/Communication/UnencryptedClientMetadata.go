// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Communication

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UnencryptedClientMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsUnencryptedClientMetadata(buf []byte, offset flatbuffers.UOffsetT) *UnencryptedClientMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UnencryptedClientMetadata{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *UnencryptedClientMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UnencryptedClientMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UnencryptedClientMetadata) SessionToken() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UnencryptedClientMetadata) Nonce() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UnencryptedClientMetadata) MutateNonce(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *UnencryptedClientMetadata) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UnencryptedClientMetadata) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func UnencryptedClientMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func UnencryptedClientMetadataAddSessionToken(builder *flatbuffers.Builder, sessionToken flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sessionToken), 0)
}
func UnencryptedClientMetadataAddNonce(builder *flatbuffers.Builder, nonce uint64) {
	builder.PrependUint64Slot(1, nonce, 0)
}
func UnencryptedClientMetadataAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(2, timestamp, 0)
}
func UnencryptedClientMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
