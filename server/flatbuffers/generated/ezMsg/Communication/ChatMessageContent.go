// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Communication

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ChatMessageContent struct {
	_tab flatbuffers.Table
}

func GetRootAsChatMessageContent(buf []byte, offset flatbuffers.UOffsetT) *ChatMessageContent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChatMessageContent{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ChatMessageContent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChatMessageContent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ChatMessageContent) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ChatMessageContent) ReplyToMessageUid() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChatMessageContent) MutateReplyToMessageUid(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *ChatMessageContent) AttachmentUids(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ChatMessageContent) AttachmentUidsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ChatMessageContent) MutateAttachmentUids(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func ChatMessageContentStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ChatMessageContentAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(text), 0)
}
func ChatMessageContentAddReplyToMessageUid(builder *flatbuffers.Builder, replyToMessageUid uint64) {
	builder.PrependUint64Slot(1, replyToMessageUid, 0)
}
func ChatMessageContentAddAttachmentUids(builder *flatbuffers.Builder, attachmentUids flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(attachmentUids), 0)
}
func ChatMessageContentStartAttachmentUidsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ChatMessageContentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
