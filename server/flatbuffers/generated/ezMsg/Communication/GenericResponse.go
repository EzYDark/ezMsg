// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Communication

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GenericResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsGenericResponse(buf []byte, offset flatbuffers.UOffsetT) *GenericResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GenericResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GenericResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GenericResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GenericResponse) RequestNonce() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GenericResponse) MutateRequestNonce(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *GenericResponse) Success() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GenericResponse) MutateSuccess(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *GenericResponse) ErrorMessage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GenericResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GenericResponseAddRequestNonce(builder *flatbuffers.Builder, requestNonce uint64) {
	builder.PrependUint64Slot(0, requestNonce, 0)
}
func GenericResponseAddSuccess(builder *flatbuffers.Builder, success bool) {
	builder.PrependBoolSlot(1, success, false)
}
func GenericResponseAddErrorMessage(builder *flatbuffers.Builder, errorMessage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(errorMessage), 0)
}
func GenericResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
