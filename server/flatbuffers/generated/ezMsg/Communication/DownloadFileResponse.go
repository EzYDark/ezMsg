// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Communication

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DownloadFileResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsDownloadFileResponse(buf []byte, offset flatbuffers.UOffsetT) *DownloadFileResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DownloadFileResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DownloadFileResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DownloadFileResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DownloadFileResponse) RequestNonce() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DownloadFileResponse) MutateRequestNonce(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *DownloadFileResponse) Success() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DownloadFileResponse) MutateSuccess(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *DownloadFileResponse) FileUid() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DownloadFileResponse) MutateFileUid(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *DownloadFileResponse) EncryptedData(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *DownloadFileResponse) EncryptedDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DownloadFileResponse) EncryptedDataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DownloadFileResponse) MutateEncryptedData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *DownloadFileResponse) ErrorMessage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DownloadFileResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DownloadFileResponseAddRequestNonce(builder *flatbuffers.Builder, requestNonce uint64) {
	builder.PrependUint64Slot(0, requestNonce, 0)
}
func DownloadFileResponseAddSuccess(builder *flatbuffers.Builder, success bool) {
	builder.PrependBoolSlot(1, success, false)
}
func DownloadFileResponseAddFileUid(builder *flatbuffers.Builder, fileUid uint64) {
	builder.PrependUint64Slot(2, fileUid, 0)
}
func DownloadFileResponseAddEncryptedData(builder *flatbuffers.Builder, encryptedData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(encryptedData), 0)
}
func DownloadFileResponseStartEncryptedDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func DownloadFileResponseAddErrorMessage(builder *flatbuffers.Builder, errorMessage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(errorMessage), 0)
}
func DownloadFileResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
