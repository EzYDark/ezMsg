// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Database

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Database struct {
	_tab flatbuffers.Table
}

func GetRootAsDatabase(buf []byte, offset flatbuffers.UOffsetT) *Database {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Database{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Database) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Database) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Database) UID() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Database) MutateUID(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Database) RegisteredUsersUIDs(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Database) RegisteredUsersUIDsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Database) MutateRegisteredUsersUIDs(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *Database) ChatsUIDs(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Database) ChatsUIDsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Database) MutateChatsUIDs(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func DatabaseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DatabaseAddUID(builder *flatbuffers.Builder, UID uint64) {
	builder.PrependUint64Slot(0, UID, 0)
}
func DatabaseAddRegisteredUsersUIDs(builder *flatbuffers.Builder, RegisteredUsersUIDs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(RegisteredUsersUIDs), 0)
}
func DatabaseStartRegisteredUsersUIDsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func DatabaseAddChatsUIDs(builder *flatbuffers.Builder, ChatsUIDs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ChatsUIDs), 0)
}
func DatabaseStartChatsUIDsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func DatabaseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
