// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Attachment

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Attachment struct {
	_tab flatbuffers.Table
}

func GetRootAsAttachment(buf []byte, offset flatbuffers.UOffsetT) *Attachment {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Attachment{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Attachment) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Attachment) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Attachment) UID() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Attachment) MutateUID(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Attachment) SenderUID() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Attachment) MutateSenderUID(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Attachment) ContentURL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Attachment) UploadedAt() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Attachment) MutateUploadedAt(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *Attachment) Size() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Attachment) MutateSize(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *Attachment) Hash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AttachmentStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func AttachmentAddUID(builder *flatbuffers.Builder, UID uint64) {
	builder.PrependUint64Slot(0, UID, 0)
}
func AttachmentAddSenderUID(builder *flatbuffers.Builder, SenderUID uint64) {
	builder.PrependUint64Slot(1, SenderUID, 0)
}
func AttachmentAddContentURL(builder *flatbuffers.Builder, ContentURL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ContentURL), 0)
}
func AttachmentAddUploadedAt(builder *flatbuffers.Builder, UploadedAt uint64) {
	builder.PrependUint64Slot(3, UploadedAt, 0)
}
func AttachmentAddSize(builder *flatbuffers.Builder, Size uint64) {
	builder.PrependUint64Slot(4, Size, 0)
}
func AttachmentAddHash(builder *flatbuffers.Builder, Hash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(Hash), 0)
}
func AttachmentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
