// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Message

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Message struct {
	_tab flatbuffers.Table
}

func GetRootAsMessage(buf []byte, offset flatbuffers.UOffsetT) *Message {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Message{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Message) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Message) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Message) UID() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Message) MutateUID(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Message) SenderUID() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Message) MutateSenderUID(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Message) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Message) AttachmentsUIDs(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Message) AttachmentsUIDsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Message) MutateAttachmentsUIDs(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *Message) SentAt() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Message) MutateSentAt(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *Message) Status() MsgStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return MsgStatus(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Message) MutateStatus(n MsgStatus) bool {
	return rcv._tab.MutateByteSlot(14, byte(n))
}

func MessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MessageAddUID(builder *flatbuffers.Builder, UID uint64) {
	builder.PrependUint64Slot(0, UID, 0)
}
func MessageAddSenderUID(builder *flatbuffers.Builder, SenderUID uint64) {
	builder.PrependUint64Slot(1, SenderUID, 0)
}
func MessageAddContent(builder *flatbuffers.Builder, Content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Content), 0)
}
func MessageAddAttachmentsUIDs(builder *flatbuffers.Builder, AttachmentsUIDs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(AttachmentsUIDs), 0)
}
func MessageStartAttachmentsUIDsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MessageAddSentAt(builder *flatbuffers.Builder, SentAt uint64) {
	builder.PrependUint64Slot(4, SentAt, 0)
}
func MessageAddStatus(builder *flatbuffers.Builder, Status MsgStatus) {
	builder.PrependByteSlot(5, byte(Status), 0)
}
func MessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
